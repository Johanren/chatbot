const { createBot, createProvider, createFlow, addKeyword, EVENTS, media, addAnswer } = require('@bot-whatsapp/bot')

const QRPortalWeb = require('@bot-whatsapp/portal')
const BaileysProvider = require('@bot-whatsapp/provider/baileys')
const MockAdapter = require('@bot-whatsapp/database/mock')
const INACTIVITY = 600000

//FINALIZACION DE LA CONVERSACI√ìN POR TIEMPO DE EXPIRACI√ìN
const flowTime = addKeyword(EVENTS.ACTION)
    .addAction(
        async (ctx, { endFlow }) => {
            endFlow(`Se notifica que el usuario ha sido desconectado del chat por una inactividad de 10 minutos.`)
        }
    )

//SALUDO DE DESPEDIDA AL FINALIZAR LA CONVERSACI√ìN
const flowExit = addKeyword(EVENTS.ACTION)
    .addAction(
        async ({ endFlow }) => {
            endFlow([
                '¬°Gracias por contactarnos! Recuerde que estamos para ayudarle¬†üë©üèª',
                '\nVisitenos en https://www.junicalmedical.com.co/'
            ])
        }
    )

const flowItem9 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            
            '*Apreciado usuario:* Para radicar su solicitud como peticiones, quejas, reclamos, sugerencias y felicitaciones, por alguno de los siguientes medios:\n',
            '1Ô∏è‚É£ *Correo electronico:*\natencionalcliente@junicalmedical.com.co\n',
            '2Ô∏è‚É£ *Buzones de sugerencias:*\nUbicados en cada uno de los servicios de hospitalizaci√≥n, consulta externa, urgencias, medicina nuclear, im√°genes diagnosticas, cardiolog√≠a y archivo.\n',
            '3Ô∏è‚É£ *WhatsApp:*\n312 593 97 60\n',
            '4Ô∏è‚É£ *P√°gina web:*\nhttps://www.junicalmedical.com.co/contactenos/\n',
            '5Ô∏è‚É£ *Formulario digital:*\nhttps://forms.office.com/r/JPPcJ7b0R5?origin=lprLink\n',
            '6Ô∏è‚É£ *Presencial:*\nEn la Carrera 6 No. 20 - 115 Altos del Rosario. Girardot, √°rea de atenci√≥n al usuario de lunes a s√°bado de 7:00 A. M. a 7:00 P. M., jornada continua, domingos o festivos 11:00 A. M. a 3:00 P. M. debe diligenciar previamente el formulario\n https://servicioalcliente.junicalmedical.com.co/declaracion_del_usuario_relacionada.pdf\n',            
            'La solicitud es atendida por orden de llegada en el menor tiempo posible.'
        ])
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 8.4 Historia clinica a paciente fallecido. üëé
const flowItem84 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            'Se√±or usuario, para radicar su solicitud enviar los formatos diligenciados y documentos requeridos, por alguno de los siguientes medios: \n',
            '1Ô∏è‚É£ *Correo electr√≥nico:*\n historias.clinicas@junical.com.co',
            '2Ô∏è‚É£ *WhatsApp:*\n 310 793 92 42',
            '3Ô∏è‚É£ *Presencial:*\n En la Carrera 6 No. 20 - 115 Altos del Rosario. Girardot, √°rea de archivo de historias cl√≠nicas de lunes a viernes (no festivos) de 8:00 A. M. a 3:00 P. M., jornada continua.\n',
            'La solicitud es atendida por un solo medio y en orden de llegada en el menor tiempo posible',
        ], { delay: 3000, }
    )
    .addAnswer(
        [
            '*HISTORIA CL√çNICA DE PACIENTE FALLECIDO.*\n',
            '‚úÖ Anexar fotocopia del Registro Civil de Defunci√≥n.',
            '‚úÖ Fotocopia de la c√©dula del paciente, registro civil o tarjeta de identidad.',
            '‚úÖ Registro civil para verificar el parentesco, en caso que sea hijo y/o padres.',
            '‚úÖ Si el solicitante es c√≥nyuge, registro de matrimonio.',
            '‚úÖ Si es compa√±ero o compa√±era presentar extra juicio de convivencia realizado en vida.',
            '‚úÖ Presentar el formulario diligenciado y firmado autorizado adjunto',
            '(SOLICITUD AUTORIZACI√ìN TERCEROS).'
        ])
    .addAnswer('.', {
        media: './assets/Solicitud_autorizacion_terceros.pdf',
    })
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem8);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 8.3 Historia clinica a paciente menor de edad o persona en condcion de discapacidad mental o fisica. üëé
const flowItem83 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            'Se√±or usuario, para radicar su solicitud enviar los formatos diligenciados y documentos requeridos, por alguno de los siguientes medios: \n',
            '1Ô∏è‚É£ *Correo electr√≥nico:*\n historias.clinicas@junical.com.co',
            '2Ô∏è‚É£ *WhatsApp:*\n 310 793 92 42',
            '3Ô∏è‚É£ *Presencial:*\n En la Carrera 6 No. 20 - 115 Altos del Rosario. Girardot, √°rea de archivo de historias cl√≠nicas de lunes a viernes (no festivos) de 8:00 A. M. a 3:00 P. M., jornada continua.\n',
            'La solicitud es atendida por un solo medio y en orden de llegada en el menor tiempo posible',
        ], { delay: 3000, }
    )
    .addAnswer(
        [
            '*HISTORIA CL√çNICA DE PACIENTE MENOR DE EDAD O PERSONA EN CONDICI√ìN DE DISCAPACIDAD MENTAL O F√çSICA.*\n',
            '‚úÖ Carta de solicitud del padre, madre o representante legal explicando el motivo de la solicitud.',
            '‚úÖ Fotocopia del documento de identificaci√≥n.',
            '(Registro Civil, Tarjeta de Identidad y C√©dula de Ciudadan√≠a)',
            '‚úÖ Fotocopia del documento de identidad del padre, madre o representante legal.',
            '(En caso que el apoderado es un abogado debe presentar la copia de la tarjeta de profesional)',
            '‚úÖ Presentar el formulario diligenciado y firmado autorizado adjunto',
            '(SOLICITUD AUTORIZACI√ìN TERCEROS).'
        ])
    .addAnswer('.', {
        media: './assets/Solicitud_autorizacion_terceros.pdf',
    })
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem8);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 8.2 Historia clinica a tercero autorizado. üëé
const flowItem82 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            'Se√±or usuario, para radicar su solicitud enviar los formatos diligenciados y documentos requeridos, por alguno de los siguientes medios: \n',
            '1Ô∏è‚É£ *Correo electr√≥nico:*\n historias.clinicas@junical.com.co',
            '2Ô∏è‚É£ *WhatsApp:*\n 310 793 92 42',
            '3Ô∏è‚É£ *Presencial:*\n En la Carrera 6 No. 20 - 115 Altos del Rosario. Girardot, √°rea de archivo de historias cl√≠nicas de lunes a viernes (no festivos) de 8:00 A. M. a 3:00 P. M., jornada continua.\n',
            'La solicitud es atendida por un solo medio y en orden de llegada en el menor tiempo posible',
        ], { delay: 3000, }
    )
    .addAnswer(
        [
            '*HISTORIA CL√çNICA PARA TERCERO AUTORIZADO.*\n',
            '‚úÖ Presentar carta de autorizaci√≥n firmada al departamento de archivo explicando el motivo de la solicitud.',
            '‚úÖ Fotocopia del documento de identidad del paciente.',
            '‚úÖ Fotocopia del documento de identidad del autorizado.',
            '‚úÖ Presentar el formulario diligenciado y firmado autorizado adjunto',
            '(SOLICITUD AUTORIZACI√ìN TERCEROS).'
        ])
    .addAnswer('.', {
        media: './assets/Solicitud_autorizacion_terceros.pdf',
    })
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem8);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 8.1 Historia clinica (Mayor de edad) üëé
const flowItem81 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            'Se√±or usuario, para radicar su solicitud enviar los formatos diligenciados y documentos requeridos, por alguno de los siguientes medios: \n',
            '1Ô∏è‚É£ *Correo electr√≥nico:*\n historias.clinicas@junical.com.co',
            '2Ô∏è‚É£ *WhatsApp:*\n 310 793 92 42',
            '3Ô∏è‚É£ *Presencial:*\n En la Carrera 6 No. 20 - 115 Altos del Rosario. Girardot, √°rea de archivo de historias cl√≠nicas de lunes a viernes (no festivos) de 8:00 A. M. a 3:00 P. M., jornada continua.\n',
            'La solicitud es atendida por un solo medio y en orden de llegada en el menor tiempo posible',
        ], { delay: 3000, }
    )
    .addAnswer(
        [
            '*HISTORIA CL√çNICA DE PACIENTE MAYOR DE EDAD.*\n',
            '‚úÖ Presentar documento de identidad original.',
            '(C√©dula de ciudadan√≠a, C√©dula de extranjer√≠a o Pasaporte)',
            '‚úÖ Diligenciar y firmar el formulario adjunto.',
            '(PACIENTE DIRECTAMENTE)'
        ])
    .addAnswer('.', {
        media: './assets/Paciente_directamente.pdf', delay: 3000,
    })
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem8);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 8 Requisitos para la entrega de la historia cl√≠nica. üëç
const flowItem8 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            'üëá Seleccione una de las siguientes opciones.\n',
            '1Ô∏è‚É£ Historia cl√≠nica (Mayor de edad).',
            '2Ô∏è‚É£ Historia cl√≠nica a tercero autorizado.',
            '3Ô∏è‚É£ Historia cl√≠nica a paciente menor de edad o persona en condici√≥n de discapacidad mental o f√≠sica.',
            '4Ô∏è‚É£ Historia cl√≠nica a paciente fallecido.',
            '5Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: OPCION 1');
                await gotoFlow(flowItem81);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: OPCION 2');
                await gotoFlow(flowItem82);
            } else if (object_text === '3') {
                console.log('SELECCION√ì: OPCION 3');
                await gotoFlow(flowItem83);
            } else if (object_text === '4') {
                console.log('SELECCION√ì: OPCION 4');
                await gotoFlow(flowItem84);
            } else if (object_text === '5') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 7.5 Agendamiento odontolog√≠a üëé
const flowItem75 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            '*Contactos de odontolog√≠a*\n',
            'üì≤ Llamadas y whatsApp: 3222638365',
            '\n*Correo electr√≥nico*\n',
            'üì© odontologia@junical.com.co'
        ])
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem7);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 7.4 Agendamiento de terapias üëé
const flowItem74 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            '*Contactos de terapias*\n',
            'üì≤ Llamadas y whatsApp: 314 489 87 18',
            '\n*Correo electr√≥nico*\n',
            'üì© terapias.ambulatorias@junical.com.co '
        ])
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem7);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 7.3 Agendamiento medicina nuclear üëé
const flowItem73 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            '*Contactos de medicina nuclear*\n',
            'üì≤ Llamadas y whatsApp: 317 365 17 53',
            '\n*Correo electr√≥nico*\n',
            'üì© medicina.nuclear@junical.com.co'
        ])
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem7);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 7.2 Agendamiento im√°genes diagn√≥sticas üëç
const flowItem72 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            '*Contactos de im√°genes diagn√≥sticas*\n',
            'üì≤ llamadas y whatsApp: 312 528 95 39',
            '\n*Correo electr√≥nico*\n',
            'üì© radiologia@junical.com.co'
        ])
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem7);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION DE CITAS 7.1 Agendamiento de citas m√©dicas üëç
const flowItem71 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            '*Contactos de citas m√©dicas*\n',
            'üì≤ Eps solo whatsApp: 313 329 70 20',
            'üì≤ Eps solo llamadas: 322 721 99 44',
            'üì≤ Eps sanitas, llamadas y whatsApp: 311 512 98 29',
            'üì≤ Particulares y medicina prepagada, llamadas y WhatsApp: 310 208 53 17',
            '\n*Correos electr√≥nicos*\n',
            'üì© citas.medicas@junicalmedical.com.co',
            'üì© servicio.preferencial@junical.com.co'
        ])
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '2Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: MENU ANTERIOR');
                await gotoFlow(flowItem7);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 7 Contactos sevicios de consulta externa üëç
const flowItem7 = addKeyword(EVENTS.ACTION)
    .addAnswer(
        [
            'üëá Seleccione una de las siguientes opciones.\n',
            '1Ô∏è‚É£ Citas m√©dicas.',
            '2Ô∏è‚É£ Im√°genes diagn√≥sticas.',
            '3Ô∏è‚É£ Medicina nuclear.',
            '4Ô∏è‚É£ Terapias.',
            '5Ô∏è‚É£ Odontolog√≠a.',
            '6Ô∏è‚É£ Para devolverse al men√∫ anterior.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: OPCION 1');
                await gotoFlow(flowItem71);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: OPCION 2');
                await gotoFlow(flowItem72);
            } else if (object_text === '3') {
                console.log('SELECCION√ì: OPCION 3');
                await gotoFlow(flowItem73);
            } else if (object_text === '4') {
                console.log('SELECCION√ì: OPCION 4');
                await gotoFlow(flowItem74);
            } else if (object_text === '5') {
                console.log('SELECCION√ì: OPCION 5');
                await gotoFlow(flowItem75);
            } else if (object_text === '6') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 6 Contactos del area de atencion al usuario üëç
const flowItem6 = addKeyword(EVENTS.ACTION)
    .addAnswer([
        '*Contactos del √°rea de atenci√≥n al usuario*\n',
        'üì≤ Llamadas y whatsApp: 312 593 97 60',
        '\n*Correo electr√≥nico*\n',
        'üì© atencionalcliente@junicalmedical.com.co'
    ])
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 5 Solicitud de dietas üëç
const flowItem5 = addKeyword(EVENTS.ACTION)
    .addAnswer('üëá Solicite su dieta haciendo clic en el siguiente enlace.')
    .addAnswer('https://alfonso.junicalmedical.com.co/frmPedPaci/frmPedPaciId')
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 4 Solicitud de citasüëç
const flowItem4 = addKeyword(EVENTS.ACTION)
    .addAnswer('üëá Solicite su cita en el siguiente enlace.')
    .addAnswer('http://citasweb.junicalmedical.com.co/NewCitasWeb/')
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 3 Encuesta de satisfacci√≥n üëç
const flowItem3 = addKeyword(EVENTS.ACTION)
    .addAnswer('üëá Para diligenciar la encuesta oprima el siguiente link')
    .addAnswer('https://docs.google.com/forms/d/e/1FAIpQLScd8oEuy6h9Eua4arCw5Su1dnNqkpKYRdLpHcXFhnMOdBQTcA/viewform')
    .addAnswer('.', {
        media: './assets/qrEncuesta.jpeg',
    })
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 2 informaci√≥n importante sobre el dengue üëç
const flowItem2 = addKeyword(EVENTS.ACTION)
    .addAnswer('ü¶ü Informaci√≥n importante sobre el dengue.')
    .addAnswer('.', {
        media: './assets/informaci√≥n_sobre_el_dengue.pdf',
    })
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

//OPCION 1 Reglamento interno
const flowItem1 = addKeyword(EVENTS.ACTION)
    .addAnswer('üìì Derechos y deberes de los usuarios.')
    .addAnswer('.', {
        media: './assets/Derechos&deberes_usuarios.pdf',
    })
    .addAnswer(
        [
            'üëá Seleccione alguna de las siguientes opciones:\n',
            '1Ô∏è‚É£ Para devolverse al men√∫ principal.',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.'
        ], { capture: true, idle: INACTIVITY }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: FLOWPRINCIPAL');
                await gotoFlow(flowSecundario);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: FLOWEXIT FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        }
    );

const flowSecundario = addKeyword(EVENTS.WELCOME)
    .addAnswer(
        [
            'üëá Seleccione una de las siguientes opciones.\n',
            '1Ô∏è‚É£ Consultar manual de derechos y deberes de los usuarios.',
            '2Ô∏è‚É£ Boletin con informaci√≥n importante sobre el dengue.',
            '3Ô∏è‚É£ Encuesta de  satisfacci√≥n.',
            '4Ô∏è‚É£ Solicitud de citas.',
            '5Ô∏è‚É£ Solicitud de dietas hospitalarias',
            '6Ô∏è‚É£ Contactos para atenci√≥n al usuario.',
            '7Ô∏è‚É£ Contactos servicios de consulta externa.',
            '8Ô∏è‚É£ Requisitos para la entrega de la historia cl√≠nica.',
            '9Ô∏è‚É£ Peticiones, quejas y reclamos',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.',
            '\n¬°Gracias por contactarnos! Recuerde que estamos para ayudarle¬†üë©üèª'
        ], { capture: true, idle: INACTIVITY, }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            console.log('üëâ CONTEXTO DEL MENSAJE FLOWPRINCIPAL: ', object_text);

            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: OPCION 1');
                await gotoFlow(flowItem1);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: OPCION 2');
                await gotoFlow(flowItem2);
            } else if (object_text === '3') {
                console.log('SELECCION√ì: OPCION 3');
                await gotoFlow(flowItem3);
            } else if (object_text === '4') {
                console.log('SELECCION√ì: OPCION 4');
                await gotoFlow(flowItem4);
            } else if (object_text === '5') {
                console.log('SELECCION√ì: OPCION 5');
                await gotoFlow(flowItem5);
            } else if (object_text === '6') {
                console.log('SELECCION√ì: OPCION 6');
                await gotoFlow(flowItem6);
            } else if (object_text === '7') {
                console.log('SELECCION√ì: OPCION 7');
                await gotoFlow(flowItem7);
            } else if (object_text === '8') {
                console.log('SELECCION√ì: OPCION 8');
                await gotoFlow(flowItem8);
            } else if (object_text === '9') {
                console.log('SELECCION√ì: OPCION 9');
                await gotoFlow(flowItem9);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: OPCION EXIT');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        })

const flowPrincipal = addKeyword(EVENTS.WELCOME)
    .addAnswer('üôå Bienvenido, soy el asistente virtual informativo de Junical Medical S. A. S.')
    .addAnswer('Le informamos que al continuar acepta las Pol√≠ticas de Tratamiento de Informaci√≥n (Datos personales) (https://alfonso.junicalmedical.com.co/politica_de_privacidad_y_tratamiento_de_datos_personales) de Junical Medical S. A. S.')
    .addAnswer(
        [
            'üëá Seleccione una de las siguientes opciones.\n',
            '1Ô∏è‚É£ Consultar manual de derechos y deberes de los usuarios.',
            '2Ô∏è‚É£ Boletin con informaci√≥n importante sobre el dengue.',
            '3Ô∏è‚É£ Encuesta de  satisfacci√≥n.',
            '4Ô∏è‚É£ Solicitud de citas.',
            '5Ô∏è‚É£ Solicitud de dietas hospitalarias.',
            '6Ô∏è‚É£ Contactos para atenci√≥n al usuario.',
            '7Ô∏è‚É£ Contactos servicios de consulta externa.',
            '8Ô∏è‚É£ Requisitos para la entrega de la historia cl√≠nica.',
            '9Ô∏è‚É£ Peticiones, quejas y reclamos',
            '0Ô∏è‚É£ Para finalizar la conversaci√≥n.',
            '\n¬°Gracias por contactarnos! Recuerde que estamos para ayudarle¬†üë©üèª'
        ], { capture: true, idle: INACTIVITY, delay: 3000, }, async (ctx, { gotoFlow, fallBack, flowDynamic }) => {
            const object_text = ctx.message.extendedTextMessage ? ctx.message.extendedTextMessage.text : ctx.message.conversation;
            console.log('üëâ CONTEXTO DEL MENSAJE FLOWPRINCIPAL: ', object_text);

            if (ctx?.idleFallBack) {
                console.log('SELECCION√ì: INACTIVIDAD FINALIZACION DE LA CONVERSACION');
                await gotoFlow(flowTime);
            } else if (object_text === '1') {
                console.log('SELECCION√ì: OPCION 1');
                await gotoFlow(flowItem1);
            } else if (object_text === '2') {
                console.log('SELECCION√ì: OPCION 2');
                await gotoFlow(flowItem2);
            } else if (object_text === '3') {
                console.log('SELECCION√ì: OPCION 3');
                await gotoFlow(flowItem3);
            } else if (object_text === '4') {
                console.log('SELECCION√ì: OPCION 4');
                await gotoFlow(flowItem4);
            } else if (object_text === '5') {
                console.log('SELECCION√ì: OPCION 5');
                await gotoFlow(flowItem5);
            } else if (object_text === '6') {
                console.log('SELECCION√ì: OPCION 6');
                await gotoFlow(flowItem6);
            } else if (object_text === '7') {
                console.log('SELECCION√ì: OPCION 7');
                await gotoFlow(flowItem7);
            } else if (object_text === '8') {
                console.log('SELECCION√ì: OPCION 8');
                await gotoFlow(flowItem8);
            } else if (object_text === '9') {
                console.log('SELECCION√ì: OPCION 9');
                await gotoFlow(flowItem9);
            } else if (object_text === '0') {
                console.log('SELECCION√ì: OPCION EXIT');
                await gotoFlow(flowExit);
            } else {
                await fallBack('Recuerde que soy un robot ü§ñ. Elija una opci√≥n v√°lida');
            }
        })


const main = async () => {
    const adapterDB = new MockAdapter()
    const adapterFlow = createFlow([flowPrincipal, flowSecundario, flowItem1, flowItem2, flowItem3, flowItem4, flowItem5, flowItem6, flowItem7, flowItem71, flowItem72, flowItem73, flowItem74, flowItem75, flowItem8, flowItem81, flowItem82, flowItem83, flowItem84, flowItem9, flowExit, flowTime])
    const adapterProvider = createProvider(BaileysProvider)


    createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    },{
        blackList:'3156078058'
    })

    QRPortalWeb({ port: 4000 });
}

main()

